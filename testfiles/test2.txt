def somma(out float a, b): float {
    moltViaSomma(a+1,2+2+2);
    return a+b;
}

integer x << 10;

def moltViaSomma(float a | float b): float {
    float risultato << 0;
    float risultato_dec << 0;
    var dec_cont << 0, mimmo<<1.0;

    while b>1 loop{
        if b < 1 then{
            dec_cont << dec_cont + 1;

        }else{
            risultato << risultato + somma(a, a);
            b << b - 1;
        }

    }

    while b!= 0 loop{
        if (b < 1) then{
            b << b*10;
            if(dec_cont != 0) then {
                risultato << risultato + risultato_dec / (10 * dec_cont);
            }
            risultato_dec << 0;
            dec_cont << dec_cont + 1;
        }
        risultato_dec << risultato_dec + somma(a,a);
        b << b - 1;
    }
    risultato << risultato + risultato_dec / (10 * dec_cont+1);

    return risultato;
}

def divisione_intera(float a | float b): float{
    float div << a / b;
    return div;
}

def potenza(float a | float b): float{
    return a ^ b;
}

def fibonacci(integer n): integer{
    if(n = 0 or n = 1) then {return 1;}
    return fibonacci(n-1) + fibonacci(n-2);
}

start: def mainfun(integer a, b | out float c, d |string mimmo ): void{
    integer op <<-1;
    op <-- "Inserisci il numero dell'operazione (0-esci, 1-somma, 2-molt, 3-div intera, 4-potenza, 5-fib)";
    while(op != 0) loop{
        if op!=5 then{
            integer n1, n2;
            n1, n2<-- "Inserisci due numeri";
            if(op = 1) then { (somma(n1, n2)) -->;}
            if(op = 2) then { (moltViaSomma(n1, n2)) -->;}
            if(op = 3) then { (divisione_intera(n1,n2)) -->;}
            if(op = 4) then { (potenza(n1,n2)) -->;}
        }else{
            integer n;
            n <-- "Inserisci un numero";
            (fibonacci(n)) -->;
        }
        op <-- "Inserisci il numero dell'operazione (0-esci, 1-somma, 2-molt, 3-div intera, 4-potenza, 5-fib)";
    }

}
