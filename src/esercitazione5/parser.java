
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package esercitazione5;

import java.util.*;
import nodes.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\140\000\002\002\004\000\002\002\005\000\002\007" +
    "\004\000\002\007\004\000\002\007\002\000\002\006\004" +
    "\000\002\003\005\000\002\003\005\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\012\003\000\002\012\005\000\002\012" +
    "\005\000\002\012\007\000\002\013\005\000\002\013\007" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\005\012\000\002\023\006\000\002\023\003\000\002\024" +
    "\005\000\002\021\002\000\002\021\003\000\002\022\003" +
    "\000\002\022\005\000\002\020\004\000\002\020\005\000" +
    "\002\011\003\000\002\011\003\000\002\004\002\000\002" +
    "\004\004\000\002\026\003\000\002\026\004\000\002\025" +
    "\003\000\002\025\004\000\002\025\003\000\002\025\004" +
    "\000\002\025\004\000\002\025\004\000\002\025\003\000" +
    "\002\025\004\000\002\025\005\000\002\025\004\000\002" +
    "\037\021\000\002\040\012\000\002\041\003\000\002\041" +
    "\004\000\002\027\007\000\002\036\002\000\002\036\004" +
    "\000\002\034\006\000\002\030\012\000\002\031\005\000" +
    "\002\031\004\000\002\014\003\000\002\014\005\000\002" +
    "\032\006\000\002\032\006\000\002\033\005\000\002\035" +
    "\006\000\002\035\005\000\002\016\003\000\002\016\005" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\005\000\002\015" +
    "\005\000\002\015\005\000\002\015\005\000\002\015\005" +
    "\000\002\015\005\000\002\015\005\000\002\015\005\000" +
    "\002\015\005\000\002\015\005\000\002\015\005\000\002" +
    "\015\005\000\002\015\005\000\002\015\005\000\002\015" +
    "\004\000\002\015\004\000\002\015\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\305\000\022\004\ufffd\014\013\017\005\020\016\021" +
    "\012\022\007\023\017\025\015\001\002\000\004\070\277" +
    "\001\002\000\006\042\ufff9\070\ufff9\001\002\000\004\002" +
    "\276\001\002\000\006\042\ufff8\070\ufff8\001\002\000\024" +
    "\002\ufffd\004\ufffd\014\013\017\005\020\016\021\012\022" +
    "\007\023\017\025\015\001\002\000\024\002\ufffd\004\ufffd" +
    "\014\013\017\005\020\016\021\012\022\007\023\017\025" +
    "\015\001\002\000\006\042\ufff6\070\ufff6\001\002\000\004" +
    "\070\255\001\002\000\004\004\251\001\002\000\004\070" +
    "\020\001\002\000\006\042\ufff7\070\ufff7\001\002\000\006" +
    "\042\ufff5\070\ufff5\001\002\000\004\040\021\001\002\000" +
    "\020\017\005\020\016\021\012\022\007\023\017\026\026" +
    "\041\uffe4\001\002\000\004\041\037\001\002\000\004\070" +
    "\030\001\002\000\006\041\uffe2\047\uffe2\001\002\000\006" +
    "\041\uffe3\047\034\001\002\000\014\017\005\020\016\021" +
    "\012\022\007\023\017\001\002\000\004\070\030\001\002" +
    "\000\014\041\uffc3\045\032\047\uffc3\050\uffc3\061\uffc3\001" +
    "\002\000\006\041\uffdf\047\uffdf\001\002\000\004\070\030" +
    "\001\002\000\012\041\uffc2\047\uffc2\050\uffc2\061\uffc2\001" +
    "\002\000\016\017\005\020\016\021\012\022\007\023\017" +
    "\026\026\001\002\000\006\041\uffe1\047\uffe1\001\002\000" +
    "\006\041\uffe0\047\uffe0\001\002\000\004\044\040\001\002" +
    "\000\016\017\005\020\016\021\012\022\007\023\017\024" +
    "\043\001\002\000\004\042\044\001\002\000\004\042\uffde" +
    "\001\002\000\004\042\uffdd\001\002\000\036\006\uffdc\013" +
    "\uffdc\014\013\016\uffdc\017\005\020\016\021\012\022\007" +
    "\023\017\027\uffdc\037\uffdc\040\uffdc\043\uffdc\070\uffdc\001" +
    "\002\000\046\002\uffe6\004\uffe6\006\uffe6\013\uffe6\014\uffe6" +
    "\015\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023" +
    "\uffe6\025\uffe6\027\uffe6\037\uffe6\040\uffe6\043\uffe6\070\uffe6" +
    "\001\002\000\024\002\uffe8\004\uffe8\014\uffe8\017\uffe8\020" +
    "\uffe8\021\uffe8\022\uffe8\023\uffe8\025\uffe8\001\002\000\022" +
    "\006\071\013\061\016\056\027\073\037\057\040\074\043" +
    "\064\070\062\001\002\000\036\006\uffdc\013\uffdc\014\013" +
    "\016\uffdc\017\005\020\016\021\012\022\007\023\017\027" +
    "\uffdc\037\uffdc\040\uffdc\043\uffdc\070\uffdc\001\002\000\022" +
    "\006\uffdb\013\uffdb\016\uffdb\027\uffdb\037\uffdb\040\uffdb\043" +
    "\uffdb\070\uffdb\001\002\000\022\006\uffd6\013\uffd6\016\uffd6" +
    "\027\uffd6\037\uffd6\040\uffd6\043\uffd6\070\uffd6\001\002\000" +
    "\004\046\250\001\002\000\022\006\071\013\061\016\056" +
    "\027\073\037\057\040\074\043\uffda\070\062\001\002\000" +
    "\004\046\246\001\002\000\026\032\101\033\104\036\111" +
    "\040\103\063\075\070\107\071\110\072\105\073\102\074" +
    "\076\001\002\000\030\032\101\033\104\036\111\040\103" +
    "\046\241\063\075\070\107\071\110\072\105\073\102\074" +
    "\076\001\002\000\004\046\237\001\002\000\026\032\101" +
    "\033\104\036\111\040\103\063\075\070\107\071\110\072" +
    "\105\073\102\074\076\001\002\000\012\040\147\045\032" +
    "\050\uffc3\061\uffc3\001\002\000\004\043\230\001\002\000" +
    "\046\002\uffe5\004\uffe5\006\uffe5\013\uffe5\014\uffe5\015\uffe5" +
    "\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5\025" +
    "\uffe5\027\uffe5\037\uffe5\040\uffe5\043\uffe5\070\uffe5\001\002" +
    "\000\006\050\224\061\225\001\002\000\022\006\uffd2\013" +
    "\uffd2\016\uffd2\027\uffd2\037\uffd2\040\uffd2\043\uffd2\070\uffd2" +
    "\001\002\000\004\046\223\001\002\000\004\046\222\001" +
    "\002\000\016\014\013\017\005\020\016\021\012\022\007" +
    "\023\017\001\002\000\022\006\uffd8\013\uffd8\016\uffd8\027" +
    "\uffd8\037\uffd8\040\uffd8\043\uffd8\070\uffd8\001\002\000\004" +
    "\070\163\001\002\000\026\032\101\033\104\036\111\040" +
    "\103\063\075\070\107\071\110\072\105\073\102\074\076" +
    "\001\002\000\026\032\101\033\104\036\111\040\103\063" +
    "\075\070\107\071\110\072\105\073\102\074\076\001\002" +
    "\000\050\031\uffb9\034\uffb9\035\uffb9\041\uffb9\045\uffb9\046" +
    "\uffb9\053\uffb9\054\uffb9\055\uffb9\056\uffb9\057\uffb9\060\uffb9" +
    "\062\uffb9\063\uffb9\064\uffb9\065\uffb9\066\uffb9\067\uffb9\076" +
    "\uffb9\001\002\000\044\034\114\035\130\041\uffbc\045\160" +
    "\046\uffbc\053\127\054\122\055\125\056\121\057\116\060" +
    "\120\062\117\063\113\064\124\065\123\066\115\067\126" +
    "\001\002\000\004\041\155\001\002\000\050\031\uffb8\034" +
    "\uffb8\035\uffb8\041\uffb8\045\uffb8\046\uffb8\053\uffb8\054\uffb8" +
    "\055\uffb8\056\uffb8\057\uffb8\060\uffb8\062\uffb8\063\uffb8\064" +
    "\uffb8\065\uffb8\066\uffb8\067\uffb8\076\uffb8\001\002\000\050" +
    "\031\uffb6\034\uffb6\035\uffb6\041\uffb6\045\uffb6\046\uffb6\053" +
    "\uffb6\054\uffb6\055\uffb6\056\uffb6\057\uffb6\060\uffb6\062\uffb6" +
    "\063\uffb6\064\uffb6\065\uffb6\066\uffb6\067\uffb6\076\uffb6\001" +
    "\002\000\026\032\101\033\104\036\111\040\103\063\075" +
    "\070\107\071\110\072\105\073\102\074\076\001\002\000" +
    "\050\031\uffb7\034\uffb7\035\uffb7\041\uffb7\045\uffb7\046\uffb7" +
    "\053\uffb7\054\uffb7\055\uffb7\056\uffb7\057\uffb7\060\uffb7\062" +
    "\uffb7\063\uffb7\064\uffb7\065\uffb7\066\uffb7\067\uffb7\076\uffb7" +
    "\001\002\000\050\031\uffba\034\uffba\035\uffba\041\uffba\045" +
    "\uffba\046\uffba\053\uffba\054\uffba\055\uffba\056\uffba\057\uffba" +
    "\060\uffba\062\uffba\063\uffba\064\uffba\065\uffba\066\uffba\067" +
    "\uffba\076\uffba\001\002\000\050\031\uffb3\034\uffb3\035\uffb3" +
    "\041\uffb3\045\uffb3\046\uffb3\053\uffb3\054\uffb3\055\uffb3\056" +
    "\uffb3\057\uffb3\060\uffb3\062\uffb3\063\uffb3\064\uffb3\065\uffb3" +
    "\066\uffb3\067\uffb3\076\uffb3\001\002\000\052\031\uffb4\034" +
    "\uffb4\035\uffb4\040\147\041\uffb4\045\uffb4\046\uffb4\053\uffb4" +
    "\054\uffb4\055\uffb4\056\uffb4\057\uffb4\060\uffb4\062\uffb4\063" +
    "\uffb4\064\uffb4\065\uffb4\066\uffb4\067\uffb4\076\uffb4\001\002" +
    "\000\050\031\uffb5\034\uffb5\035\uffb5\041\uffb5\045\uffb5\046" +
    "\uffb5\053\uffb5\054\uffb5\055\uffb5\056\uffb5\057\uffb5\060\uffb5" +
    "\062\uffb5\063\uffb5\064\uffb5\065\uffb5\066\uffb5\067\uffb5\076" +
    "\uffb5\001\002\000\026\032\101\033\104\036\111\040\103" +
    "\063\075\070\107\071\110\072\105\073\102\074\076\001" +
    "\002\000\050\031\uffa3\034\uffa3\035\uffa3\041\uffa3\045\uffa3" +
    "\046\uffa3\053\127\054\122\055\125\056\121\057\116\060" +
    "\120\062\117\063\113\064\124\065\123\066\115\067\126" +
    "\076\uffa3\001\002\000\026\032\101\033\104\036\111\040" +
    "\103\063\075\070\107\071\110\072\105\073\102\074\076" +
    "\001\002\000\026\032\101\033\104\036\111\040\103\063" +
    "\075\070\107\071\110\072\105\073\102\074\076\001\002" +
    "\000\026\032\101\033\104\036\111\040\103\063\075\070" +
    "\107\071\110\072\105\073\102\074\076\001\002\000\026" +
    "\032\101\033\104\036\111\040\103\063\075\070\107\071" +
    "\110\072\105\073\102\074\076\001\002\000\026\032\101" +
    "\033\104\036\111\040\103\063\075\070\107\071\110\072" +
    "\105\073\102\074\076\001\002\000\026\032\101\033\104" +
    "\036\111\040\103\063\075\070\107\071\110\072\105\073" +
    "\102\074\076\001\002\000\026\032\101\033\104\036\111" +
    "\040\103\063\075\070\107\071\110\072\105\073\102\074" +
    "\076\001\002\000\026\032\101\033\104\036\111\040\103" +
    "\063\075\070\107\071\110\072\105\073\102\074\076\001" +
    "\002\000\026\032\101\033\104\036\111\040\103\063\075" +
    "\070\107\071\110\072\105\073\102\074\076\001\002\000" +
    "\026\032\101\033\104\036\111\040\103\063\075\070\107" +
    "\071\110\072\105\073\102\074\076\001\002\000\026\032" +
    "\101\033\104\036\111\040\103\063\075\070\107\071\110" +
    "\072\105\073\102\074\076\001\002\000\026\032\101\033" +
    "\104\036\111\040\103\063\075\070\107\071\110\072\105" +
    "\073\102\074\076\001\002\000\026\032\101\033\104\036" +
    "\111\040\103\063\075\070\107\071\110\072\105\073\102" +
    "\074\076\001\002\000\026\032\101\033\104\036\111\040" +
    "\103\063\075\070\107\071\110\072\105\073\102\074\076" +
    "\001\002\000\050\031\uffab\034\114\035\uffab\041\uffab\045" +
    "\uffab\046\uffab\053\127\054\122\055\125\056\121\057\116" +
    "\060\120\062\117\063\113\064\124\065\123\066\115\067" +
    "\126\076\uffab\001\002\000\034\031\uffa8\034\uffa8\035\uffa8" +
    "\041\uffa8\045\uffa8\046\uffa8\062\117\063\113\064\124\065" +
    "\123\066\115\067\126\076\uffa8\001\002\000\050\031\uffac" +
    "\034\uffac\035\uffac\041\uffac\045\uffac\046\uffac\053\uffac\054" +
    "\uffac\055\uffac\056\uffac\057\uffac\060\uffac\062\117\063\113" +
    "\064\124\065\123\066\115\067\uffac\076\uffac\001\002\000" +
    "\034\031\uffa5\034\uffa5\035\uffa5\041\uffa5\045\uffa5\046\uffa5" +
    "\062\117\063\113\064\124\065\123\066\115\067\126\076" +
    "\uffa5\001\002\000\050\031\uffb0\034\uffb0\035\uffb0\041\uffb0" +
    "\045\uffb0\046\uffb0\053\uffb0\054\uffb0\055\uffb0\056\uffb0\057" +
    "\uffb0\060\uffb0\062\uffb0\063\uffb0\064\uffb0\065\123\066\115" +
    "\067\uffb0\076\uffb0\001\002\000\050\031\uffaf\034\uffaf\035" +
    "\uffaf\041\uffaf\045\uffaf\046\uffaf\053\uffaf\054\uffaf\055\uffaf" +
    "\056\uffaf\057\uffaf\060\uffaf\062\uffaf\063\uffaf\064\uffaf\065" +
    "\uffaf\066\115\067\uffaf\076\uffaf\001\002\000\034\031\uffaa" +
    "\034\uffaa\035\uffaa\041\uffaa\045\uffaa\046\uffaa\062\117\063" +
    "\113\064\124\065\123\066\115\067\126\076\uffaa\001\002" +
    "\000\034\031\uffa7\034\uffa7\035\uffa7\041\uffa7\045\uffa7\046" +
    "\uffa7\062\117\063\113\064\124\065\123\066\115\067\126" +
    "\076\uffa7\001\002\000\034\031\uffa6\034\uffa6\035\uffa6\041" +
    "\uffa6\045\uffa6\046\uffa6\062\117\063\113\064\124\065\123" +
    "\066\115\067\126\076\uffa6\001\002\000\050\031\uffb2\034" +
    "\uffb2\035\uffb2\041\uffb2\045\uffb2\046\uffb2\053\uffb2\054\uffb2" +
    "\055\uffb2\056\uffb2\057\uffb2\060\uffb2\062\uffb2\063\113\064" +
    "\124\065\123\066\115\067\uffb2\076\uffb2\001\002\000\034" +
    "\031\uffa9\034\uffa9\035\uffa9\041\uffa9\045\uffa9\046\uffa9\062" +
    "\117\063\113\064\124\065\123\066\115\067\126\076\uffa9" +
    "\001\002\000\050\031\uffad\034\uffad\035\uffad\041\uffad\045" +
    "\uffad\046\uffad\053\uffad\054\uffad\055\uffad\056\uffad\057\uffad" +
    "\060\uffad\062\uffad\063\uffad\064\uffad\065\uffad\066\115\067" +
    "\uffad\076\uffad\001\002\000\050\031\uffae\034\uffae\035\uffae" +
    "\041\uffae\045\uffae\046\uffae\053\127\054\122\055\125\056" +
    "\121\057\116\060\120\062\117\063\113\064\124\065\123" +
    "\066\115\067\126\076\uffae\001\002\000\050\031\uffb1\034" +
    "\uffb1\035\uffb1\041\uffb1\045\uffb1\046\uffb1\053\uffb1\054\uffb1" +
    "\055\uffb1\056\uffb1\057\uffb1\060\uffb1\062\uffb1\063\uffb1\064" +
    "\124\065\123\066\115\067\uffb1\076\uffb1\001\002\000\030" +
    "\032\101\033\104\036\111\040\103\041\151\063\075\070" +
    "\107\071\110\072\105\073\102\074\076\001\002\000\004" +
    "\041\152\001\002\000\050\031\uffbd\034\uffbd\035\uffbd\041" +
    "\uffbd\045\uffbd\046\uffbd\053\uffbd\054\uffbd\055\uffbd\056\uffbd" +
    "\057\uffbd\060\uffbd\062\uffbd\063\uffbd\064\uffbd\065\uffbd\066" +
    "\uffbd\067\uffbd\076\uffbd\001\002\000\050\031\uffbe\034\uffbe" +
    "\035\uffbe\041\uffbe\045\uffbe\046\uffbe\053\uffbe\054\uffbe\055" +
    "\uffbe\056\uffbe\057\uffbe\060\uffbe\062\uffbe\063\uffbe\064\uffbe" +
    "\065\uffbe\066\uffbe\067\uffbe\076\uffbe\001\002\000\040\034" +
    "\114\035\130\041\154\053\127\054\122\055\125\056\121" +
    "\057\116\060\120\062\117\063\113\064\124\065\123\066" +
    "\115\067\126\001\002\000\050\031\uffa2\034\uffa2\035\uffa2" +
    "\041\uffa2\045\uffa2\046\uffa2\053\uffa2\054\uffa2\055\uffa2\056" +
    "\uffa2\057\uffa2\060\uffa2\062\uffa2\063\uffa2\064\uffa2\065\uffa2" +
    "\066\uffa2\067\uffa2\076\uffa2\001\002\000\006\051\156\052" +
    "\157\001\002\000\004\046\uffc1\001\002\000\004\046\uffc0" +
    "\001\002\000\026\032\101\033\104\036\111\040\103\063" +
    "\075\070\107\071\110\072\105\073\102\074\076\001\002" +
    "\000\006\041\uffbb\046\uffbb\001\002\000\050\031\uffa4\034" +
    "\uffa4\035\uffa4\041\uffa4\045\uffa4\046\uffa4\053\uffa4\054\uffa4" +
    "\055\uffa4\056\uffa4\057\uffa4\060\uffa4\062\uffa4\063\uffa4\064" +
    "\uffa4\065\uffa4\066\uffa4\067\uffa4\076\uffa4\001\002\000\004" +
    "\061\164\001\002\000\004\072\165\001\002\000\004\030" +
    "\166\001\002\000\004\072\167\001\002\000\004\031\170" +
    "\001\002\000\004\042\044\001\002\000\022\006\uffc6\013" +
    "\uffc6\016\uffc6\027\uffc6\037\uffc6\040\uffc6\043\uffc6\070\uffc6" +
    "\001\002\000\004\007\173\001\002\000\004\040\174\001" +
    "\002\000\026\032\101\033\104\036\111\040\103\063\075" +
    "\070\107\071\110\072\105\073\102\074\076\001\002\000" +
    "\040\034\114\035\130\041\176\053\127\054\122\055\125" +
    "\056\121\057\116\060\120\062\117\063\113\064\124\065" +
    "\123\066\115\067\126\001\002\000\004\010\177\001\002" +
    "\000\004\042\200\001\002\000\020\006\071\013\061\016" +
    "\056\027\073\037\057\040\074\070\062\001\002\000\004" +
    "\043\202\001\002\000\004\011\205\001\002\000\004\012" +
    "\216\001\002\000\006\011\205\012\uffcc\001\002\000\004" +
    "\040\206\001\002\000\026\032\101\033\104\036\111\040" +
    "\103\063\075\070\107\071\110\072\105\073\102\074\076" +
    "\001\002\000\040\034\114\035\130\041\210\053\127\054" +
    "\122\055\125\056\121\057\116\060\120\062\117\063\113" +
    "\064\124\065\123\066\115\067\126\001\002\000\004\010" +
    "\211\001\002\000\004\042\212\001\002\000\020\006\071" +
    "\013\061\016\056\027\073\037\057\040\074\070\062\001" +
    "\002\000\004\043\214\001\002\000\006\011\uffcd\012\uffcd" +
    "\001\002\000\004\012\uffcb\001\002\000\004\042\217\001" +
    "\002\000\020\006\071\013\061\016\056\027\073\037\057" +
    "\040\074\070\062\001\002\000\004\043\221\001\002\000" +
    "\004\046\uffce\001\002\000\022\006\uffd4\013\uffd4\016\uffd4" +
    "\027\uffd4\037\uffd4\040\uffd4\043\uffd4\070\uffd4\001\002\000" +
    "\022\006\uffd7\013\uffd7\016\uffd7\027\uffd7\037\uffd7\040\uffd7" +
    "\043\uffd7\070\uffd7\001\002\000\006\046\uffc4\073\227\001" +
    "\002\000\026\032\101\033\104\036\111\040\103\063\075" +
    "\070\107\071\110\072\105\073\102\074\076\001\002\000" +
    "\004\046\uffbf\001\002\000\004\046\uffc5\001\002\000\046" +
    "\002\uffe7\004\uffe7\006\uffe7\013\uffe7\014\uffe7\015\uffe7\016" +
    "\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7\025\uffe7" +
    "\027\uffe7\037\uffe7\040\uffe7\043\uffe7\070\uffe7\001\002\000" +
    "\040\034\114\035\130\053\127\054\122\055\125\056\121" +
    "\057\116\060\120\062\117\063\113\064\124\065\123\066" +
    "\115\067\126\076\232\001\002\000\004\042\044\001\002" +
    "\000\024\006\uffc9\013\uffc9\015\234\016\uffc9\027\uffc9\037" +
    "\uffc9\040\uffc9\043\uffc9\070\uffc9\001\002\000\004\042\044" +
    "\001\002\000\022\006\uffca\013\uffca\016\uffca\027\uffca\037" +
    "\uffca\040\uffca\043\uffca\070\uffca\001\002\000\022\006\uffc8" +
    "\013\uffc8\016\uffc8\027\uffc8\037\uffc8\040\uffc8\043\uffc8\070" +
    "\uffc8\001\002\000\022\006\uffd1\013\uffd1\016\uffd1\027\uffd1" +
    "\037\uffd1\040\uffd1\043\uffd1\070\uffd1\001\002\000\040\034" +
    "\114\035\130\046\242\053\127\054\122\055\125\056\121" +
    "\057\116\060\120\062\117\063\113\064\124\065\123\066" +
    "\115\067\126\001\002\000\022\006\uffcf\013\uffcf\016\uffcf" +
    "\027\uffcf\037\uffcf\040\uffcf\043\uffcf\070\uffcf\001\002\000" +
    "\022\006\uffd0\013\uffd0\016\uffd0\027\uffd0\037\uffd0\040\uffd0" +
    "\043\uffd0\070\uffd0\001\002\000\040\031\244\034\114\035" +
    "\130\053\127\054\122\055\125\056\121\057\116\060\120" +
    "\062\117\063\113\064\124\065\123\066\115\067\126\001" +
    "\002\000\004\042\044\001\002\000\022\006\uffc7\013\uffc7" +
    "\016\uffc7\027\uffc7\037\uffc7\040\uffc7\043\uffc7\070\uffc7\001" +
    "\002\000\022\006\uffd3\013\uffd3\016\uffd3\027\uffd3\037\uffd3" +
    "\040\uffd3\043\uffd3\070\uffd3\001\002\000\004\043\uffd9\001" +
    "\002\000\022\006\uffd5\013\uffd5\016\uffd5\027\uffd5\037\uffd5" +
    "\040\uffd5\043\uffd5\070\uffd5\001\002\000\004\025\015\001" +
    "\002\000\022\002\ufffd\014\013\017\005\020\016\021\012" +
    "\022\007\023\017\025\015\001\002\000\004\002\000\001" +
    "\002\000\022\002\ufffc\014\ufffc\017\ufffc\020\ufffc\021\ufffc" +
    "\022\ufffc\023\ufffc\025\ufffc\001\002\000\004\061\272\001" +
    "\002\000\006\045\257\046\260\001\002\000\004\070\261" +
    "\001\002\000\046\002\ufffa\004\ufffa\006\ufffa\007\ufffa\013" +
    "\ufffa\014\ufffa\016\ufffa\017\ufffa\020\ufffa\021\ufffa\022\ufffa" +
    "\023\ufffa\025\ufffa\027\ufffa\037\ufffa\040\ufffa\043\ufffa\070" +
    "\ufffa\001\002\000\004\061\262\001\002\000\016\032\265" +
    "\033\266\071\271\072\264\073\263\074\267\001\002\000" +
    "\006\045\uffea\046\uffea\001\002\000\006\045\uffee\046\uffee" +
    "\001\002\000\006\045\uffec\046\uffec\001\002\000\006\045" +
    "\uffeb\046\uffeb\001\002\000\006\045\uffed\046\uffed\001\002" +
    "\000\006\045\uffef\046\uffef\001\002\000\006\045\uffe9\046" +
    "\uffe9\001\002\000\016\032\265\033\266\071\271\072\264" +
    "\073\263\074\267\001\002\000\006\045\ufff0\046\ufff0\001" +
    "\002\000\006\002\uffff\004\uffff\001\002\000\006\002\ufffe" +
    "\004\ufffe\001\002\000\004\002\001\001\002\000\010\045" +
    "\ufff4\046\ufff4\061\306\001\002\000\006\045\301\046\302" +
    "\001\002\000\004\070\303\001\002\000\046\002\ufffb\004" +
    "\ufffb\006\ufffb\007\ufffb\013\ufffb\014\ufffb\016\ufffb\017\ufffb" +
    "\020\ufffb\021\ufffb\022\ufffb\023\ufffb\025\ufffb\027\ufffb\037" +
    "\ufffb\040\ufffb\043\ufffb\070\ufffb\001\002\000\010\045\ufff3" +
    "\046\ufff3\061\304\001\002\000\026\032\101\033\104\036" +
    "\111\040\103\063\075\070\107\071\110\072\105\073\102" +
    "\074\076\001\002\000\042\034\114\035\130\045\ufff1\046" +
    "\ufff1\053\127\054\122\055\125\056\121\057\116\060\120" +
    "\062\117\063\113\064\124\065\123\066\115\067\126\001" +
    "\002\000\026\032\101\033\104\036\111\040\103\063\075" +
    "\070\107\071\110\072\105\073\102\074\076\001\002\000" +
    "\042\034\114\035\130\045\ufff2\046\ufff2\053\127\054\122" +
    "\055\125\056\121\057\116\060\120\062\117\063\113\064" +
    "\124\065\123\066\115\067\126\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\305\000\014\002\005\003\010\005\007\007\013\010" +
    "\003\001\001\000\004\012\277\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\003\010\005" +
    "\007\007\274\010\003\001\001\000\012\003\010\005\007" +
    "\007\273\010\003\001\001\000\002\001\001\000\004\013" +
    "\255\001\001\000\004\006\251\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\010\022\020\023\021\021\022\024\001\001\000\002" +
    "\001\001\000\004\014\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\026\001\001\000\004\014\030" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\032\001\001\000\002\001\001\000\006\010\022\020\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\010\041\011\040\001\001\000\006\023\045" +
    "\024\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\003\047\004\046\010\003\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\014\064\025\053\026\062\027" +
    "\071\030\051\031\052\032\067\033\054\034\065\035\057" +
    "\037\066\001\001\000\010\003\047\004\050\010\003\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\014\064\025\053\026\246\027\071\030\051\031" +
    "\052\032\067\033\054\034\065\035\057\037\066\001\001" +
    "\000\002\001\001\000\006\015\242\035\105\001\001\000" +
    "\006\015\237\035\105\001\001\000\002\001\001\000\006" +
    "\015\230\035\105\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\003\171\010" +
    "\003\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\015\076\016\077\035\105\001\001\000\006\015\161\035" +
    "\105\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\015" +
    "\152\035\105\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\015\111\035\105\001\001\000\002\001\001\000\006" +
    "\015\145\035\105\001\001\000\006\015\144\035\105\001" +
    "\001\000\006\015\143\035\105\001\001\000\006\015\142" +
    "\035\105\001\001\000\006\015\141\035\105\001\001\000" +
    "\006\015\140\035\105\001\001\000\006\015\137\035\105" +
    "\001\001\000\006\015\136\035\105\001\001\000\006\015" +
    "\135\035\105\001\001\000\006\015\134\035\105\001\001" +
    "\000\006\015\133\035\105\001\001\000\006\015\132\035" +
    "\105\001\001\000\006\015\131\035\105\001\001\000\006" +
    "\015\130\035\105\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\015" +
    "\076\016\147\035\105\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\015\076\016\160\035\105\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\023\170\024\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\015\174\035\105\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\014\064\025\053\026\200\027\071\030\051\031" +
    "\052\032\067\033\054\034\065\035\057\037\066\001\001" +
    "\000\002\001\001\000\006\040\203\041\202\001\001\000" +
    "\002\001\001\000\006\040\203\041\214\001\001\000\002" +
    "\001\001\000\006\015\206\035\105\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\014\064" +
    "\025\053\026\212\027\071\030\051\031\052\032\067\033" +
    "\054\034\065\035\057\037\066\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\014\064\025\053\026\217\027\071\030\051\031\052" +
    "\032\067\033\054\034\065\035\057\037\066\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\015\076\016\225\035" +
    "\105\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\023\232\024\044\001" +
    "\001\000\004\036\234\001\001\000\006\023\235\024\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\023\244\024\044\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\253\001\001\000\012\003\010\005" +
    "\007\007\252\010\003\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\267" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\272\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\015\304\035\105" +
    "\001\001\000\002\001\001\000\006\015\306\035\105\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= DeclList MainFunDecl DeclList 
            {
              Program RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Declaration> d1 = (ArrayList<Declaration>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int m1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FunDecl m1 = (FunDecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Declaration> d2 = (ArrayList<Declaration>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Program(d1,(FunDecl)m1,d2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DeclList ::= VarDecl DeclList 
            {
              ArrayList<Declaration> RESULT =null;
		int vardleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vardright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VarDecl vard = (VarDecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Declaration> dlist = (ArrayList<Declaration>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = dlist; RESULT.add(0,vard); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclList",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DeclList ::= FunDecl DeclList 
            {
              ArrayList<Declaration> RESULT =null;
		int fundleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fundright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FunDecl fund = (FunDecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Declaration> dlist = (ArrayList<Declaration>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = dlist; RESULT.add(0,fund); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclList",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DeclList ::= 
            {
              ArrayList<Declaration> RESULT =null;
		RESULT = new ArrayList<Declaration>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclList",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // MainFunDecl ::= MAIN FunDecl 
            {
              FunDecl RESULT =null;
		int fundleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fundright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FunDecl fund = (FunDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = fund; RESULT.setMain(true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MainFunDecl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // VarDecl ::= Type IdInitList SEMI 
            {
              VarDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<IdInit> idlist = (ArrayList<IdInit>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecl(t, idlist);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecl",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // VarDecl ::= VAR IdInitObblList SEMI 
            {
              VarDecl RESULT =null;
		int idlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<IdInit> idlist = (ArrayList<IdInit>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecl(new Type("var"), idlist);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecl",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Type ::= INT 
            {
              Type RESULT =null;
		RESULT= new Type("int");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Type ::= BOOL 
            {
              Type RESULT =null;
		RESULT= new Type("bool");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Type ::= FLOAT 
            {
              Type RESULT =null;
		RESULT= new Type("float");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Type ::= STRING 
            {
              Type RESULT =null;
		RESULT= new Type("string");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Type ::= CHAR 
            {
              Type RESULT =null;
		RESULT= new Type("char");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // IdInitList ::= ID 
            {
              ArrayList<IdInit> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ArrayList<IdInit>(); RESULT.add(new IdInit(new IDLeaf(id.toString()))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdInitList",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // IdInitList ::= IdInitList COMMA ID 
            {
              ArrayList<IdInit> RESULT =null;
		int idinitlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idinitlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<IdInit> idinitl = (ArrayList<IdInit>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=idinitl; RESULT.add(new IdInit(new IDLeaf(id.toString())));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdInitList",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // IdInitList ::= ID ASSIGN Expr 
            {
              ArrayList<IdInit> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr val = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ArrayList<IdInit>(); RESULT.add(new IdInit(new IDLeaf(id.toString()), val )); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdInitList",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // IdInitList ::= IdInitList COMMA ID ASSIGN Expr 
            {
              ArrayList<IdInit> RESULT =null;
		int idinitlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idinitlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<IdInit> idinitl = (ArrayList<IdInit>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr val = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=idinitl; RESULT.add(new IdInit(new IDLeaf(id.toString()), val));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdInitList",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // IdInitObblList ::= ID ASSIGN Const 
            {
              ArrayList<IdInit> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ConstLeaf c = (ConstLeaf)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new ArrayList<IdInit>(); RESULT.add(new IdInit(new IDLeaf(id.toString()), c, true)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdInitObblList",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // IdInitObblList ::= IdInitObblList COMMA ID ASSIGN Const 
            {
              ArrayList<IdInit> RESULT =null;
		int idinitolleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idinitolright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<IdInit> idinitol = (ArrayList<IdInit>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ConstLeaf c = (ConstLeaf)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=idinitol; RESULT.add(new IdInit(new IDLeaf(id.toString()), c, true));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdInitObblList",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Const ::= INTEGER_CONST 
            {
              ConstLeaf RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new ConstLeaf("integer_const", c.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Const ::= REAL_CONST 
            {
              ConstLeaf RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new ConstLeaf("real_const", c.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Const ::= TRUE 
            {
              ConstLeaf RESULT =null;
		RESULT= new ConstLeaf("boolean_const", "true");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Const ::= FALSE 
            {
              ConstLeaf RESULT =null;
		RESULT= new ConstLeaf("boolean_const", "false");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Const ::= STRING_CONST 
            {
              ConstLeaf RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new ConstLeaf("string_const", c.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Const ::= CHAR_CONST 
            {
              ConstLeaf RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new ConstLeaf("char_const", c.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // FunDecl ::= DEF ID LPAR ParamDeclList RPAR COLON TypeOrVoid Body 
            {
              FunDecl RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int l1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<ParDecl> l1 = (ArrayList<ParDecl>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Body b = (Body)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new FunDecl(new IDLeaf(id.toString()), l1, t, b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunDecl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Body ::= LBRAC VarDeclList StatList RBRAC 
            {
              Body RESULT =null;
		int l1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<VarDecl> l1 = (ArrayList<VarDecl>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Stat> l2 = (ArrayList<Stat>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Body(l1, l2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Body",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Body ::= NoStatBody 
            {
              Body RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Body b = (Body)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Body",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NoStatBody ::= LBRAC VarDeclList RBRAC 
            {
              Body RESULT =null;
		int l1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<VarDecl> l1 = (ArrayList<VarDecl>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Body(l1, new ArrayList<Stat>());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NoStatBody",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ParamDeclList ::= 
            {
              ArrayList<ParDecl> RESULT =null;
		RESULT = new ArrayList<ParDecl>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParamDeclList",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ParamDeclList ::= NonEmptyParamDeclList 
            {
              ArrayList<ParDecl> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ParDecl> l = (ArrayList<ParDecl>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParamDeclList",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NonEmptyParamDeclList ::= ParDecl 
            {
              ArrayList<ParDecl> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParDecl p = (ParDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<ParDecl>(); RESULT.add(p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NonEmptyParamDeclList",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NonEmptyParamDeclList ::= NonEmptyParamDeclList PIPE ParDecl 
            {
              ArrayList<ParDecl> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<ParDecl> l = (ArrayList<ParDecl>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParDecl p = (ParDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l; RESULT.add(p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NonEmptyParamDeclList",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ParDecl ::= Type IdList 
            {
              ParDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<IDLeaf> l = (ArrayList<IDLeaf>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ParDecl(t, l, false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParDecl",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ParDecl ::= OUT Type IdList 
            {
              ParDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<IDLeaf> l = (ArrayList<IDLeaf>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ParDecl(t, l, true);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParDecl",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TypeOrVoid ::= Type 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeOrVoid",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TypeOrVoid ::= VOID 
            {
              Type RESULT =null;
		RESULT = new Type("void"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeOrVoid",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // VarDeclList ::= 
            {
              ArrayList<VarDecl> RESULT =null;
		RESULT = new ArrayList<VarDecl>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDeclList",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // VarDeclList ::= VarDecl VarDeclList 
            {
              ArrayList<VarDecl> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VarDecl v = (VarDecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<VarDecl> l = (ArrayList<VarDecl>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = l; RESULT.add(0,v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDeclList",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // StatList ::= Stat 
            {
              ArrayList<Stat> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stat s = (Stat)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ArrayList<Stat>(); RESULT.add(s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatList",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // StatList ::= Stat StatList 
            {
              ArrayList<Stat> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Stat s = (Stat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Stat> l = (ArrayList<Stat>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = l; RESULT.add(0,s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatList",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Stat ::= IfStat 
            {
              Stat RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IfStat s = (IfStat)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Stat ::= LetStat SEMI 
            {
              Stat RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LetStat s = (LetStat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Stat ::= ForStat 
            {
              Stat RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ForStat s = (ForStat)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Stat ::= ReadStat SEMI 
            {
              Stat RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ReadStat s = (ReadStat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Stat ::= WriteStat SEMI 
            {
              Stat RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		WriteStat s = (WriteStat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Stat ::= AssignStat SEMI 
            {
              Stat RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AssignStat s = (AssignStat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Stat ::= WhileStat 
            {
              Stat RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WhileStat s = (WhileStat)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Stat ::= FunCall SEMI 
            {
              Stat RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FunCall f = (FunCall)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new FunCallStatement(f);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Stat ::= RETURN Expr SEMI 
            {
              Stat RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new ReturnStatement(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Stat ::= RETURN SEMI 
            {
              Stat RESULT =null;
		RESULT = new ReturnStatement(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // LetStat ::= LET VarDecl GODOTWHEN LPAR Expr RPAR DOTLOOP LBRAC StatList RBRAC WhenList OTHERWISEDO LBRAC StatList RBRAC 
            {
              LetStat RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		VarDecl v = (VarDecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int sl1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int sl1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ArrayList<Stat> sl1 = (ArrayList<Stat>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int wlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int wlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<SingleWhen> wl = (ArrayList<SingleWhen>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sl3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sl3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Stat> sl3 = (ArrayList<Stat>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new LetStat(v,e1,sl1,wl,sl3);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LetStat",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SingleWhen ::= DOTWHEN LPAR Expr RPAR DOTLOOP LBRAC StatList RBRAC 
            {
              SingleWhen RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Stat> sl = (ArrayList<Stat>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new SingleWhen(e,sl);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SingleWhen",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // WhenList ::= SingleWhen 
            {
              ArrayList<SingleWhen> RESULT =null;
		int swleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int swright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SingleWhen sw = (SingleWhen)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ArrayList<SingleWhen>(); RESULT.add(sw);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WhenList",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // WhenList ::= SingleWhen WhenList 
            {
              ArrayList<SingleWhen> RESULT =null;
		int swleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int swright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SingleWhen sw = (SingleWhen)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int wlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<SingleWhen> wl = (ArrayList<SingleWhen>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = wl; RESULT.add(0,sw);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WhenList",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // IfStat ::= IF Expr THEN Body Else 
            {
              IfStat RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr ex = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Body b = (Body)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Body e = (Body)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new IfStat(ex,b,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IfStat",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Else ::= 
            {
              Body RESULT =null;
		RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Else",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Else ::= ELSE Body 
            {
              Body RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Body b = (Body)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Else",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // WhileStat ::= WHILE Expr LOOP Body 
            {
              WhileStat RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Body b = (Body)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new WhileStat(e,b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WhileStat",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ForStat ::= FOR ID ASSIGN INTEGER_CONST TO INTEGER_CONST LOOP Body 
            {
              ForStat RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String c1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String c2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Body b = (Body)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ForStat(new IDLeaf(id.toString()),c1,c2,b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ForStat",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ReadStat ::= IdList READ STRING_CONST 
            {
              ReadStat RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<IDLeaf> l = (ArrayList<IDLeaf>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ReadStat(l,c);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReadStat",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ReadStat ::= IdList READ 
            {
              ReadStat RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<IDLeaf> l = (ArrayList<IDLeaf>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new ReadStat(l);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReadStat",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // IdList ::= ID 
            {
              ArrayList<IDLeaf> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ArrayList<IDLeaf>(); RESULT.add(new IDLeaf(id.toString()));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdList",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // IdList ::= ID COMMA IdList 
            {
              ArrayList<IDLeaf> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<IDLeaf> l = (ArrayList<IDLeaf>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = l; RESULT.add(0, new IDLeaf(id.toString()));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdList",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // WriteStat ::= LPAR ExprList RPAR WRITE 
            {
              WriteStat RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Expr> l = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new WriteStat(l, 0);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WriteStat",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // WriteStat ::= LPAR ExprList RPAR WRITELN 
            {
              WriteStat RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Expr> l = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new WriteStat(l, 1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WriteStat",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // AssignStat ::= IdList ASSIGN ExprList 
            {
              AssignStat RESULT =null;
		int l1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<IDLeaf> l1 = (ArrayList<IDLeaf>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expr> l2 = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new AssignStat(l1,l2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AssignStat",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // FunCall ::= ID LPAR ExprList RPAR 
            {
              FunCall RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expr> l = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new FunCall(new IDLeaf(id.toString()),l);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunCall",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // FunCall ::= ID LPAR RPAR 
            {
              FunCall RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new FunCall(new IDLeaf(id.toString()),null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunCall",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ExprList ::= Expr 
            {
              ArrayList<Expr> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ArrayList<Expr>(); RESULT.add(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprList",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ExprList ::= Expr COMMA ExprList 
            {
              ArrayList<Expr> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expr> l = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = l; RESULT.add(0, e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprList",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Expr ::= INTEGER_CONST 
            {
              Expr RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new ConstLeaf("integer_const", c.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Expr ::= REAL_CONST 
            {
              Expr RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new ConstLeaf("real_const", c.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Expr ::= TRUE 
            {
              Expr RESULT =null;
		RESULT= new ConstLeaf("boolean_const", "true");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Expr ::= FALSE 
            {
              Expr RESULT =null;
		RESULT= new ConstLeaf("boolean_const", "false");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Expr ::= STRING_CONST 
            {
              Expr RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new ConstLeaf("string_const", c.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Expr ::= CHAR_CONST 
            {
              Expr RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new ConstLeaf("char_const", c.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Expr ::= ID 
            {
              Expr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new IDLeaf(id.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Expr ::= FunCall 
            {
              Expr RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FunCall f = (FunCall)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = f;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Expr ::= Expr PLUS Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BinaryOperation(e1, "plus", e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Expr ::= Expr MINUS Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BinaryOperation(e1, "minus", e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Expr ::= Expr TIMES Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BinaryOperation(e1, "times", e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Expr ::= Expr DIV Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BinaryOperation(e1, "div", e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Expr ::= Expr AND Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BinaryOperation(e1, "and", e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Expr ::= Expr POW Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BinaryOperation(e1, "pow", e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Expr ::= Expr STR_CONCAT Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BinaryOperation(e1, "str_concat", e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Expr ::= Expr OR Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BinaryOperation(e1, "or", e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Expr ::= Expr GT Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BinaryOperation(e1, "gt", e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Expr ::= Expr GE Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BinaryOperation(e1, "ge", e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Expr ::= Expr LT Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BinaryOperation(e1, "lt", e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Expr ::= Expr LE Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BinaryOperation(e1, "le", e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Expr ::= Expr EQ Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BinaryOperation(e1, "eq", e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Expr ::= Expr NE Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BinaryOperation(e1, "ne", e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Expr ::= MINUS Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new UnaryOperation("minus",e1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Expr ::= NOT Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new UnaryOperation("not",e1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Expr ::= LPAR Expr RPAR 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new UnaryOperation("par", e1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
