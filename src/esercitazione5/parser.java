
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package esercitazione5;

import java.util.*;
import nodes.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\141\000\002\002\004\000\002\002\005\000\002\007" +
    "\004\000\002\007\004\000\002\007\002\000\002\006\004" +
    "\000\002\003\005\000\002\003\005\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\012\003\000\002\012\005\000\002\012" +
    "\005\000\002\012\007\000\002\013\005\000\002\013\007" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\005\012\000\002\023\006\000\002\023\003\000\002\024" +
    "\005\000\002\021\002\000\002\021\003\000\002\022\003" +
    "\000\002\022\005\000\002\020\004\000\002\020\005\000" +
    "\002\011\003\000\002\011\003\000\002\004\002\000\002" +
    "\004\004\000\002\026\003\000\002\026\004\000\002\025" +
    "\003\000\002\025\003\000\002\025\004\000\002\025\004" +
    "\000\002\025\004\000\002\025\003\000\002\025\004\000" +
    "\002\025\005\000\002\025\004\000\002\025\004\000\002" +
    "\037\011\000\002\041\004\000\002\041\002\000\002\040" +
    "\007\000\002\040\006\000\002\027\007\000\002\036\002" +
    "\000\002\036\004\000\002\034\006\000\002\030\012\000" +
    "\002\031\005\000\002\031\004\000\002\014\003\000\002" +
    "\014\005\000\002\032\006\000\002\032\006\000\002\033" +
    "\005\000\002\035\006\000\002\035\005\000\002\016\003" +
    "\000\002\016\005\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\005\000\002\015\005\000\002\015\005\000\002\015\005" +
    "\000\002\015\005\000\002\015\005\000\002\015\005\000" +
    "\002\015\005\000\002\015\005\000\002\015\005\000\002" +
    "\015\005\000\002\015\005\000\002\015\005\000\002\015" +
    "\005\000\002\015\004\000\002\015\004\000\002\015\005" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\274\000\022\004\ufffd\006\013\011\005\012\016\013" +
    "\012\014\007\015\017\017\015\001\002\000\004\062\266" +
    "\001\002\000\006\034\ufff9\062\ufff9\001\002\000\004\002" +
    "\265\001\002\000\006\034\ufff8\062\ufff8\001\002\000\024" +
    "\002\ufffd\004\ufffd\006\013\011\005\012\016\013\012\014" +
    "\007\015\017\017\015\001\002\000\024\002\ufffd\004\ufffd" +
    "\006\013\011\005\012\016\013\012\014\007\015\017\017" +
    "\015\001\002\000\006\034\ufff6\062\ufff6\001\002\000\004" +
    "\062\252\001\002\000\004\004\246\001\002\000\004\062" +
    "\020\001\002\000\006\034\ufff7\062\ufff7\001\002\000\006" +
    "\034\ufff5\062\ufff5\001\002\000\004\032\021\001\002\000" +
    "\020\011\005\012\016\013\012\014\007\015\017\020\026" +
    "\033\uffe4\001\002\000\004\033\037\001\002\000\004\062" +
    "\030\001\002\000\006\033\uffe2\041\uffe2\001\002\000\006" +
    "\033\uffe3\041\034\001\002\000\014\011\005\012\016\013" +
    "\012\014\007\015\017\001\002\000\004\062\030\001\002" +
    "\000\014\033\uffc2\037\032\041\uffc2\042\uffc2\053\uffc2\001" +
    "\002\000\006\033\uffdf\041\uffdf\001\002\000\004\062\030" +
    "\001\002\000\012\033\uffc1\041\uffc1\042\uffc1\053\uffc1\001" +
    "\002\000\016\011\005\012\016\013\012\014\007\015\017" +
    "\020\026\001\002\000\006\033\uffe1\041\uffe1\001\002\000" +
    "\006\033\uffe0\041\uffe0\001\002\000\004\036\040\001\002" +
    "\000\016\011\005\012\016\013\012\014\007\015\017\016" +
    "\043\001\002\000\004\034\044\001\002\000\004\034\uffde" +
    "\001\002\000\004\034\uffdd\001\002\000\036\005\uffdc\006" +
    "\013\010\uffdc\011\005\012\016\013\012\014\007\015\017" +
    "\021\uffdc\031\uffdc\032\uffdc\035\uffdc\062\uffdc\071\uffdc\001" +
    "\002\000\050\002\uffe6\004\uffe6\005\uffe6\006\uffe6\007\uffe6" +
    "\010\uffe6\011\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6\017" +
    "\uffe6\021\uffe6\031\uffe6\032\uffe6\035\uffe6\062\uffe6\071\uffe6" +
    "\072\uffe6\001\002\000\024\002\uffe8\004\uffe8\006\uffe8\011" +
    "\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\017\uffe8\001\002" +
    "\000\022\005\062\010\056\021\072\031\057\032\073\035" +
    "\065\062\063\071\061\001\002\000\036\005\uffdc\006\013" +
    "\010\uffdc\011\005\012\016\013\012\014\007\015\017\021" +
    "\uffdc\031\uffdc\032\uffdc\035\uffdc\062\uffdc\071\uffdc\001\002" +
    "\000\022\005\uffdb\010\uffdb\021\uffdb\031\uffdb\032\uffdb\035" +
    "\uffdb\062\uffdb\071\uffdb\001\002\000\024\005\uffd7\010\uffd7" +
    "\021\uffd7\031\uffd7\032\uffd7\035\uffd7\062\uffd7\071\uffd7\072" +
    "\uffd7\001\002\000\004\040\245\001\002\000\024\005\062" +
    "\010\056\021\072\031\057\032\073\035\uffda\062\063\071" +
    "\061\072\uffda\001\002\000\004\040\243\001\002\000\026" +
    "\024\102\025\105\030\112\032\104\055\076\062\110\063" +
    "\111\064\107\065\103\066\077\001\002\000\030\024\102" +
    "\025\105\030\112\032\104\040\236\055\076\062\110\063" +
    "\111\064\107\065\103\066\077\001\002\000\004\040\234" +
    "\001\002\000\004\032\207\001\002\000\026\024\102\025" +
    "\105\030\112\032\104\055\076\062\110\063\111\064\107" +
    "\065\103\066\077\001\002\000\012\032\150\037\032\042" +
    "\uffc2\053\uffc2\001\002\000\004\035\200\001\002\000\050" +
    "\002\uffe5\004\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5\011" +
    "\uffe5\012\uffe5\013\uffe5\014\uffe5\015\uffe5\017\uffe5\021\uffe5" +
    "\031\uffe5\032\uffe5\035\uffe5\062\uffe5\071\uffe5\072\uffe5\001" +
    "\002\000\006\042\174\053\175\001\002\000\024\005\uffd3" +
    "\010\uffd3\021\uffd3\031\uffd3\032\uffd3\035\uffd3\062\uffd3\071" +
    "\uffd3\072\uffd3\001\002\000\004\040\173\001\002\000\024" +
    "\005\uffd8\010\uffd8\021\uffd8\031\uffd8\032\uffd8\035\uffd8\062" +
    "\uffd8\071\uffd8\072\uffd8\001\002\000\004\062\164\001\002" +
    "\000\026\024\102\025\105\030\112\032\104\055\076\062" +
    "\110\063\111\064\107\065\103\066\077\001\002\000\004" +
    "\040\075\001\002\000\024\005\uffcf\010\uffcf\021\uffcf\031" +
    "\uffcf\032\uffcf\035\uffcf\062\uffcf\071\uffcf\072\uffcf\001\002" +
    "\000\026\024\102\025\105\030\112\032\104\055\076\062" +
    "\110\063\111\064\107\065\103\066\077\001\002\000\050" +
    "\023\uffb8\026\uffb8\027\uffb8\033\uffb8\037\uffb8\040\uffb8\045" +
    "\uffb8\046\uffb8\047\uffb8\050\uffb8\051\uffb8\052\uffb8\054\uffb8" +
    "\055\uffb8\056\uffb8\057\uffb8\060\uffb8\061\uffb8\070\uffb8\001" +
    "\002\000\044\026\115\027\131\033\uffbb\037\161\040\uffbb" +
    "\045\130\046\124\047\126\050\122\051\117\052\120\054" +
    "\121\055\114\056\125\057\123\060\116\061\127\001\002" +
    "\000\004\033\156\001\002\000\050\023\uffb7\026\uffb7\027" +
    "\uffb7\033\uffb7\037\uffb7\040\uffb7\045\uffb7\046\uffb7\047\uffb7" +
    "\050\uffb7\051\uffb7\052\uffb7\054\uffb7\055\uffb7\056\uffb7\057" +
    "\uffb7\060\uffb7\061\uffb7\070\uffb7\001\002\000\050\023\uffb5" +
    "\026\uffb5\027\uffb5\033\uffb5\037\uffb5\040\uffb5\045\uffb5\046" +
    "\uffb5\047\uffb5\050\uffb5\051\uffb5\052\uffb5\054\uffb5\055\uffb5" +
    "\056\uffb5\057\uffb5\060\uffb5\061\uffb5\070\uffb5\001\002\000" +
    "\026\024\102\025\105\030\112\032\104\055\076\062\110" +
    "\063\111\064\107\065\103\066\077\001\002\000\050\023" +
    "\uffb6\026\uffb6\027\uffb6\033\uffb6\037\uffb6\040\uffb6\045\uffb6" +
    "\046\uffb6\047\uffb6\050\uffb6\051\uffb6\052\uffb6\054\uffb6\055" +
    "\uffb6\056\uffb6\057\uffb6\060\uffb6\061\uffb6\070\uffb6\001\002" +
    "\000\050\023\uffb2\026\uffb2\027\uffb2\033\uffb2\037\uffb2\040" +
    "\uffb2\045\uffb2\046\uffb2\047\uffb2\050\uffb2\051\uffb2\052\uffb2" +
    "\054\uffb2\055\uffb2\056\uffb2\057\uffb2\060\uffb2\061\uffb2\070" +
    "\uffb2\001\002\000\050\023\uffb9\026\uffb9\027\uffb9\033\uffb9" +
    "\037\uffb9\040\uffb9\045\uffb9\046\uffb9\047\uffb9\050\uffb9\051" +
    "\uffb9\052\uffb9\054\uffb9\055\uffb9\056\uffb9\057\uffb9\060\uffb9" +
    "\061\uffb9\070\uffb9\001\002\000\052\023\uffb3\026\uffb3\027" +
    "\uffb3\032\150\033\uffb3\037\uffb3\040\uffb3\045\uffb3\046\uffb3" +
    "\047\uffb3\050\uffb3\051\uffb3\052\uffb3\054\uffb3\055\uffb3\056" +
    "\uffb3\057\uffb3\060\uffb3\061\uffb3\070\uffb3\001\002\000\050" +
    "\023\uffb4\026\uffb4\027\uffb4\033\uffb4\037\uffb4\040\uffb4\045" +
    "\uffb4\046\uffb4\047\uffb4\050\uffb4\051\uffb4\052\uffb4\054\uffb4" +
    "\055\uffb4\056\uffb4\057\uffb4\060\uffb4\061\uffb4\070\uffb4\001" +
    "\002\000\026\024\102\025\105\030\112\032\104\055\076" +
    "\062\110\063\111\064\107\065\103\066\077\001\002\000" +
    "\050\023\uffa2\026\uffa2\027\uffa2\033\uffa2\037\uffa2\040\uffa2" +
    "\045\130\046\124\047\126\050\122\051\117\052\120\054" +
    "\121\055\114\056\125\057\123\060\116\061\127\070\uffa2" +
    "\001\002\000\026\024\102\025\105\030\112\032\104\055" +
    "\076\062\110\063\111\064\107\065\103\066\077\001\002" +
    "\000\026\024\102\025\105\030\112\032\104\055\076\062" +
    "\110\063\111\064\107\065\103\066\077\001\002\000\026" +
    "\024\102\025\105\030\112\032\104\055\076\062\110\063" +
    "\111\064\107\065\103\066\077\001\002\000\026\024\102" +
    "\025\105\030\112\032\104\055\076\062\110\063\111\064" +
    "\107\065\103\066\077\001\002\000\026\024\102\025\105" +
    "\030\112\032\104\055\076\062\110\063\111\064\107\065" +
    "\103\066\077\001\002\000\026\024\102\025\105\030\112" +
    "\032\104\055\076\062\110\063\111\064\107\065\103\066" +
    "\077\001\002\000\026\024\102\025\105\030\112\032\104" +
    "\055\076\062\110\063\111\064\107\065\103\066\077\001" +
    "\002\000\026\024\102\025\105\030\112\032\104\055\076" +
    "\062\110\063\111\064\107\065\103\066\077\001\002\000" +
    "\026\024\102\025\105\030\112\032\104\055\076\062\110" +
    "\063\111\064\107\065\103\066\077\001\002\000\026\024" +
    "\102\025\105\030\112\032\104\055\076\062\110\063\111" +
    "\064\107\065\103\066\077\001\002\000\026\024\102\025" +
    "\105\030\112\032\104\055\076\062\110\063\111\064\107" +
    "\065\103\066\077\001\002\000\026\024\102\025\105\030" +
    "\112\032\104\055\076\062\110\063\111\064\107\065\103" +
    "\066\077\001\002\000\026\024\102\025\105\030\112\032" +
    "\104\055\076\062\110\063\111\064\107\065\103\066\077" +
    "\001\002\000\026\024\102\025\105\030\112\032\104\055" +
    "\076\062\110\063\111\064\107\065\103\066\077\001\002" +
    "\000\050\023\uffaa\026\115\027\uffaa\033\uffaa\037\uffaa\040" +
    "\uffaa\045\130\046\124\047\126\050\122\051\117\052\120" +
    "\054\121\055\114\056\125\057\123\060\116\061\127\070" +
    "\uffaa\001\002\000\034\023\uffa7\026\uffa7\027\uffa7\033\uffa7" +
    "\037\uffa7\040\uffa7\054\121\055\114\056\125\057\123\060" +
    "\116\061\127\070\uffa7\001\002\000\050\023\uffab\026\uffab" +
    "\027\uffab\033\uffab\037\uffab\040\uffab\045\uffab\046\uffab\047" +
    "\uffab\050\uffab\051\uffab\052\uffab\054\121\055\114\056\125" +
    "\057\123\060\116\061\uffab\070\uffab\001\002\000\034\023" +
    "\uffa4\026\uffa4\027\uffa4\033\uffa4\037\uffa4\040\uffa4\054\121" +
    "\055\114\056\125\057\123\060\116\061\127\070\uffa4\001" +
    "\002\000\050\023\uffaf\026\uffaf\027\uffaf\033\uffaf\037\uffaf" +
    "\040\uffaf\045\uffaf\046\uffaf\047\uffaf\050\uffaf\051\uffaf\052" +
    "\uffaf\054\uffaf\055\uffaf\056\uffaf\057\123\060\116\061\uffaf" +
    "\070\uffaf\001\002\000\034\023\uffa9\026\uffa9\027\uffa9\033" +
    "\uffa9\037\uffa9\040\uffa9\054\121\055\114\056\125\057\123" +
    "\060\116\061\127\070\uffa9\001\002\000\050\023\uffae\026" +
    "\uffae\027\uffae\033\uffae\037\uffae\040\uffae\045\uffae\046\uffae" +
    "\047\uffae\050\uffae\051\uffae\052\uffae\054\uffae\055\uffae\056" +
    "\uffae\057\uffae\060\116\061\uffae\070\uffae\001\002\000\034" +
    "\023\uffa6\026\uffa6\027\uffa6\033\uffa6\037\uffa6\040\uffa6\054" +
    "\121\055\114\056\125\057\123\060\116\061\127\070\uffa6" +
    "\001\002\000\050\023\uffb1\026\uffb1\027\uffb1\033\uffb1\037" +
    "\uffb1\040\uffb1\045\uffb1\046\uffb1\047\uffb1\050\uffb1\051\uffb1" +
    "\052\uffb1\054\uffb1\055\114\056\125\057\123\060\116\061" +
    "\uffb1\070\uffb1\001\002\000\034\023\uffa5\026\uffa5\027\uffa5" +
    "\033\uffa5\037\uffa5\040\uffa5\054\121\055\114\056\125\057" +
    "\123\060\116\061\127\070\uffa5\001\002\000\034\023\uffa8" +
    "\026\uffa8\027\uffa8\033\uffa8\037\uffa8\040\uffa8\054\121\055" +
    "\114\056\125\057\123\060\116\061\127\070\uffa8\001\002" +
    "\000\050\023\uffac\026\uffac\027\uffac\033\uffac\037\uffac\040" +
    "\uffac\045\uffac\046\uffac\047\uffac\050\uffac\051\uffac\052\uffac" +
    "\054\uffac\055\uffac\056\uffac\057\uffac\060\116\061\uffac\070" +
    "\uffac\001\002\000\050\023\uffad\026\uffad\027\uffad\033\uffad" +
    "\037\uffad\040\uffad\045\130\046\124\047\126\050\122\051" +
    "\117\052\120\054\121\055\114\056\125\057\123\060\116" +
    "\061\127\070\uffad\001\002\000\050\023\uffb0\026\uffb0\027" +
    "\uffb0\033\uffb0\037\uffb0\040\uffb0\045\uffb0\046\uffb0\047\uffb0" +
    "\050\uffb0\051\uffb0\052\uffb0\054\uffb0\055\uffb0\056\125\057" +
    "\123\060\116\061\uffb0\070\uffb0\001\002\000\030\024\102" +
    "\025\105\030\112\032\104\033\152\055\076\062\110\063" +
    "\111\064\107\065\103\066\077\001\002\000\004\033\153" +
    "\001\002\000\050\023\uffbc\026\uffbc\027\uffbc\033\uffbc\037" +
    "\uffbc\040\uffbc\045\uffbc\046\uffbc\047\uffbc\050\uffbc\051\uffbc" +
    "\052\uffbc\054\uffbc\055\uffbc\056\uffbc\057\uffbc\060\uffbc\061" +
    "\uffbc\070\uffbc\001\002\000\050\023\uffbd\026\uffbd\027\uffbd" +
    "\033\uffbd\037\uffbd\040\uffbd\045\uffbd\046\uffbd\047\uffbd\050" +
    "\uffbd\051\uffbd\052\uffbd\054\uffbd\055\uffbd\056\uffbd\057\uffbd" +
    "\060\uffbd\061\uffbd\070\uffbd\001\002\000\040\026\115\027" +
    "\131\033\155\045\130\046\124\047\126\050\122\051\117" +
    "\052\120\054\121\055\114\056\125\057\123\060\116\061" +
    "\127\001\002\000\050\023\uffa1\026\uffa1\027\uffa1\033\uffa1" +
    "\037\uffa1\040\uffa1\045\uffa1\046\uffa1\047\uffa1\050\uffa1\051" +
    "\uffa1\052\uffa1\054\uffa1\055\uffa1\056\uffa1\057\uffa1\060\uffa1" +
    "\061\uffa1\070\uffa1\001\002\000\006\043\157\044\160\001" +
    "\002\000\004\040\uffc0\001\002\000\004\040\uffbf\001\002" +
    "\000\026\024\102\025\105\030\112\032\104\055\076\062" +
    "\110\063\111\064\107\065\103\066\077\001\002\000\006" +
    "\033\uffba\040\uffba\001\002\000\050\023\uffa3\026\uffa3\027" +
    "\uffa3\033\uffa3\037\uffa3\040\uffa3\045\uffa3\046\uffa3\047\uffa3" +
    "\050\uffa3\051\uffa3\052\uffa3\054\uffa3\055\uffa3\056\uffa3\057" +
    "\uffa3\060\uffa3\061\uffa3\070\uffa3\001\002\000\004\053\165" +
    "\001\002\000\004\064\166\001\002\000\004\022\167\001" +
    "\002\000\004\064\170\001\002\000\004\023\171\001\002" +
    "\000\004\034\044\001\002\000\024\005\uffc5\010\uffc5\021" +
    "\uffc5\031\uffc5\032\uffc5\035\uffc5\062\uffc5\071\uffc5\072\uffc5" +
    "\001\002\000\024\005\uffd5\010\uffd5\021\uffd5\031\uffd5\032" +
    "\uffd5\035\uffd5\062\uffd5\071\uffd5\072\uffd5\001\002\000\006" +
    "\040\uffc3\065\177\001\002\000\026\024\102\025\105\030" +
    "\112\032\104\055\076\062\110\063\111\064\107\065\103" +
    "\066\077\001\002\000\004\040\uffbe\001\002\000\004\040" +
    "\uffc4\001\002\000\050\002\uffe7\004\uffe7\005\uffe7\006\uffe7" +
    "\007\uffe7\010\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7\015" +
    "\uffe7\017\uffe7\021\uffe7\031\uffe7\032\uffe7\035\uffe7\062\uffe7" +
    "\071\uffe7\072\uffe7\001\002\000\040\026\115\027\131\045" +
    "\130\046\124\047\126\050\122\051\117\052\120\054\121" +
    "\055\114\056\125\057\123\060\116\061\127\070\202\001" +
    "\002\000\004\034\044\001\002\000\026\005\uffc8\007\204" +
    "\010\uffc8\021\uffc8\031\uffc8\032\uffc8\035\uffc8\062\uffc8\071" +
    "\uffc8\072\uffc8\001\002\000\004\034\044\001\002\000\024" +
    "\005\uffc9\010\uffc9\021\uffc9\031\uffc9\032\uffc9\035\uffc9\062" +
    "\uffc9\071\uffc9\072\uffc9\001\002\000\024\005\uffc7\010\uffc7" +
    "\021\uffc7\031\uffc7\032\uffc7\035\uffc7\062\uffc7\071\uffc7\072" +
    "\uffc7\001\002\000\004\062\210\001\002\000\004\033\211" +
    "\001\002\000\020\024\217\025\220\063\222\064\221\065" +
    "\216\066\213\073\uffcc\001\002\000\004\036\226\001\002" +
    "\000\010\036\uffed\037\uffed\040\uffed\001\002\000\004\073" +
    "\224\001\002\000\020\024\217\025\220\063\222\064\221" +
    "\065\216\066\213\073\uffcc\001\002\000\010\036\uffea\037" +
    "\uffea\040\uffea\001\002\000\010\036\uffec\037\uffec\040\uffec" +
    "\001\002\000\010\036\uffeb\037\uffeb\040\uffeb\001\002\000" +
    "\010\036\uffee\037\uffee\040\uffee\001\002\000\010\036\uffe9" +
    "\037\uffe9\040\uffe9\001\002\000\004\073\uffcd\001\002\000" +
    "\004\071\225\001\002\000\004\040\uffce\001\002\000\022" +
    "\005\062\010\056\021\072\031\057\032\073\062\063\071" +
    "\061\072\227\001\002\000\004\040\233\001\002\000\004" +
    "\072\231\001\002\000\004\040\232\001\002\000\020\024" +
    "\uffcb\025\uffcb\063\uffcb\064\uffcb\065\uffcb\066\uffcb\073\uffcb" +
    "\001\002\000\020\024\uffca\025\uffca\063\uffca\064\uffca\065" +
    "\uffca\066\uffca\073\uffca\001\002\000\024\005\uffd2\010\uffd2" +
    "\021\uffd2\031\uffd2\032\uffd2\035\uffd2\062\uffd2\071\uffd2\072" +
    "\uffd2\001\002\000\040\026\115\027\131\040\237\045\130" +
    "\046\124\047\126\050\122\051\117\052\120\054\121\055" +
    "\114\056\125\057\123\060\116\061\127\001\002\000\024" +
    "\005\uffd0\010\uffd0\021\uffd0\031\uffd0\032\uffd0\035\uffd0\062" +
    "\uffd0\071\uffd0\072\uffd0\001\002\000\024\005\uffd1\010\uffd1" +
    "\021\uffd1\031\uffd1\032\uffd1\035\uffd1\062\uffd1\071\uffd1\072" +
    "\uffd1\001\002\000\040\023\241\026\115\027\131\045\130" +
    "\046\124\047\126\050\122\051\117\052\120\054\121\055" +
    "\114\056\125\057\123\060\116\061\127\001\002\000\004" +
    "\034\044\001\002\000\024\005\uffc6\010\uffc6\021\uffc6\031" +
    "\uffc6\032\uffc6\035\uffc6\062\uffc6\071\uffc6\072\uffc6\001\002" +
    "\000\024\005\uffd4\010\uffd4\021\uffd4\031\uffd4\032\uffd4\035" +
    "\uffd4\062\uffd4\071\uffd4\072\uffd4\001\002\000\006\035\uffd9" +
    "\072\uffd9\001\002\000\024\005\uffd6\010\uffd6\021\uffd6\031" +
    "\uffd6\032\uffd6\035\uffd6\062\uffd6\071\uffd6\072\uffd6\001\002" +
    "\000\004\017\015\001\002\000\022\002\ufffd\006\013\011" +
    "\005\012\016\013\012\014\007\015\017\017\015\001\002" +
    "\000\004\002\000\001\002\000\022\002\ufffc\006\ufffc\011" +
    "\ufffc\012\ufffc\013\ufffc\014\ufffc\015\ufffc\017\ufffc\001\002" +
    "\000\004\053\261\001\002\000\006\037\254\040\255\001" +
    "\002\000\004\062\256\001\002\000\044\002\ufffa\004\ufffa" +
    "\005\ufffa\006\ufffa\010\ufffa\011\ufffa\012\ufffa\013\ufffa\014" +
    "\ufffa\015\ufffa\017\ufffa\021\ufffa\031\ufffa\032\ufffa\035\ufffa" +
    "\062\ufffa\071\ufffa\001\002\000\004\053\257\001\002\000" +
    "\016\024\217\025\220\063\222\064\221\065\216\066\213" +
    "\001\002\000\006\037\uffef\040\uffef\001\002\000\016\024" +
    "\217\025\220\063\222\064\221\065\216\066\213\001\002" +
    "\000\006\037\ufff0\040\ufff0\001\002\000\006\002\uffff\004" +
    "\uffff\001\002\000\006\002\ufffe\004\ufffe\001\002\000\004" +
    "\002\001\001\002\000\010\037\ufff4\040\ufff4\053\275\001" +
    "\002\000\006\037\270\040\271\001\002\000\004\062\272" +
    "\001\002\000\044\002\ufffb\004\ufffb\005\ufffb\006\ufffb\010" +
    "\ufffb\011\ufffb\012\ufffb\013\ufffb\014\ufffb\015\ufffb\017\ufffb" +
    "\021\ufffb\031\ufffb\032\ufffb\035\ufffb\062\ufffb\071\ufffb\001" +
    "\002\000\010\037\ufff3\040\ufff3\053\273\001\002\000\026" +
    "\024\102\025\105\030\112\032\104\055\076\062\110\063" +
    "\111\064\107\065\103\066\077\001\002\000\042\026\115" +
    "\027\131\037\ufff1\040\ufff1\045\130\046\124\047\126\050" +
    "\122\051\117\052\120\054\121\055\114\056\125\057\123" +
    "\060\116\061\127\001\002\000\026\024\102\025\105\030" +
    "\112\032\104\055\076\062\110\063\111\064\107\065\103" +
    "\066\077\001\002\000\042\026\115\027\131\037\ufff2\040" +
    "\ufff2\045\130\046\124\047\126\050\122\051\117\052\120" +
    "\054\121\055\114\056\125\057\123\060\116\061\127\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\274\000\014\002\005\003\010\005\007\007\013\010" +
    "\003\001\001\000\004\012\266\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\003\010\005" +
    "\007\007\263\010\003\001\001\000\012\003\010\005\007" +
    "\007\262\010\003\001\001\000\002\001\001\000\004\013" +
    "\252\001\001\000\004\006\246\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\010\022\020\023\021\021\022\024\001\001\000\002" +
    "\001\001\000\004\014\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\026\001\001\000\004\014\030" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\032\001\001\000\002\001\001\000\006\010\022\020\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\010\041\011\040\001\001\000\006\023\045" +
    "\024\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\003\047\004\046\010\003\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\014\065\025\053\026\063\027" +
    "\070\030\051\031\052\032\067\033\054\034\066\035\057" +
    "\037\073\001\001\000\010\003\047\004\050\010\003\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\014\065\025\053\026\243\027\070\030\051\031" +
    "\052\032\067\033\054\034\066\035\057\037\073\001\001" +
    "\000\002\001\001\000\006\015\237\035\105\001\001\000" +
    "\006\015\234\035\105\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\015\200\035\105\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\015\077\016\100\035\105\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\015\162\035" +
    "\105\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\015" +
    "\153\035\105\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\015\112\035\105\001\001\000\002\001\001\000\006" +
    "\015\146\035\105\001\001\000\006\015\145\035\105\001" +
    "\001\000\006\015\144\035\105\001\001\000\006\015\143" +
    "\035\105\001\001\000\006\015\142\035\105\001\001\000" +
    "\006\015\141\035\105\001\001\000\006\015\140\035\105" +
    "\001\001\000\006\015\137\035\105\001\001\000\006\015" +
    "\136\035\105\001\001\000\006\015\135\035\105\001\001" +
    "\000\006\015\134\035\105\001\001\000\006\015\133\035" +
    "\105\001\001\000\006\015\132\035\105\001\001\000\006" +
    "\015\131\035\105\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\015" +
    "\077\016\150\035\105\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\015\077\016\161\035\105\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\023\171\024\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\015\077\016\175\035" +
    "\105\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\023\202\024\044\001" +
    "\001\000\004\036\204\001\001\000\006\023\205\024\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\017\211\040\214\041\213" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\017\211\040\214\041\222\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\014\065\025\053\026\227\027" +
    "\070\030\051\031\052\032\067\033\054\034\066\035\057" +
    "\037\073\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\023\241\024\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\250\001\001\000\012\003\010" +
    "\005\007\007\247\010\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\257\001\001\000\002\001\001\000\004\017\261\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\015" +
    "\273\035\105\001\001\000\002\001\001\000\006\015\275" +
    "\035\105\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= DeclList MainFunDecl DeclList 
            {
              Program RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Declaration> d1 = (ArrayList<Declaration>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int m1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FunDecl m1 = (FunDecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Declaration> d2 = (ArrayList<Declaration>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Program(d1,(FunDecl)m1,d2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DeclList ::= VarDecl DeclList 
            {
              ArrayList<Declaration> RESULT =null;
		int vardleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vardright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VarDecl vard = (VarDecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Declaration> dlist = (ArrayList<Declaration>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = dlist; RESULT.add(0,vard); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclList",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DeclList ::= FunDecl DeclList 
            {
              ArrayList<Declaration> RESULT =null;
		int fundleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fundright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FunDecl fund = (FunDecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Declaration> dlist = (ArrayList<Declaration>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = dlist; RESULT.add(0,fund); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclList",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DeclList ::= 
            {
              ArrayList<Declaration> RESULT =null;
		RESULT = new ArrayList<Declaration>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclList",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // MainFunDecl ::= MAIN FunDecl 
            {
              FunDecl RESULT =null;
		int fundleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fundright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FunDecl fund = (FunDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = fund; RESULT.setMain(true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MainFunDecl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // VarDecl ::= Type IdInitList SEMI 
            {
              VarDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<IdInit> idlist = (ArrayList<IdInit>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecl(t, idlist);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecl",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // VarDecl ::= VAR IdInitObblList SEMI 
            {
              VarDecl RESULT =null;
		int idlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<IdInit> idlist = (ArrayList<IdInit>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecl(new Type("var"), idlist);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecl",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Type ::= INT 
            {
              Type RESULT =null;
		RESULT= new Type("int");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Type ::= BOOL 
            {
              Type RESULT =null;
		RESULT= new Type("bool");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Type ::= FLOAT 
            {
              Type RESULT =null;
		RESULT= new Type("float");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Type ::= STRING 
            {
              Type RESULT =null;
		RESULT= new Type("string");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Type ::= CHAR 
            {
              Type RESULT =null;
		RESULT= new Type("char");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // IdInitList ::= ID 
            {
              ArrayList<IdInit> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ArrayList<IdInit>(); RESULT.add(new IdInit(new IDLeaf(id.toString()))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdInitList",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // IdInitList ::= IdInitList COMMA ID 
            {
              ArrayList<IdInit> RESULT =null;
		int idinitlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idinitlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<IdInit> idinitl = (ArrayList<IdInit>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=idinitl; RESULT.add(new IdInit(new IDLeaf(id.toString())));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdInitList",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // IdInitList ::= ID ASSIGN Expr 
            {
              ArrayList<IdInit> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr val = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ArrayList<IdInit>(); RESULT.add(new IdInit(new IDLeaf(id.toString()), val )); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdInitList",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // IdInitList ::= IdInitList COMMA ID ASSIGN Expr 
            {
              ArrayList<IdInit> RESULT =null;
		int idinitlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idinitlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<IdInit> idinitl = (ArrayList<IdInit>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr val = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=idinitl; RESULT.add(new IdInit(new IDLeaf(id.toString()), val));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdInitList",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // IdInitObblList ::= ID ASSIGN Const 
            {
              ArrayList<IdInit> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ConstLeaf c = (ConstLeaf)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new ArrayList<IdInit>(); RESULT.add(new IdInit(new IDLeaf(id.toString()), c, true)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdInitObblList",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // IdInitObblList ::= IdInitObblList COMMA ID ASSIGN Const 
            {
              ArrayList<IdInit> RESULT =null;
		int idinitolleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idinitolright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<IdInit> idinitol = (ArrayList<IdInit>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ConstLeaf c = (ConstLeaf)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=idinitol; RESULT.add(new IdInit(new IDLeaf(id.toString()), c, true));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdInitObblList",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Const ::= INTEGER_CONST 
            {
              ConstLeaf RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new ConstLeaf("integer_const", c.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Const ::= REAL_CONST 
            {
              ConstLeaf RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new ConstLeaf("real_const", c.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Const ::= TRUE 
            {
              ConstLeaf RESULT =null;
		RESULT= new ConstLeaf("boolean_const", "true");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Const ::= FALSE 
            {
              ConstLeaf RESULT =null;
		RESULT= new ConstLeaf("boolean_const", "false");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Const ::= STRING_CONST 
            {
              ConstLeaf RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new ConstLeaf("string_const", c.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Const ::= CHAR_CONST 
            {
              ConstLeaf RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new ConstLeaf("char_const", c.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // FunDecl ::= DEF ID LPAR ParamDeclList RPAR COLON TypeOrVoid Body 
            {
              FunDecl RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int l1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<ParDecl> l1 = (ArrayList<ParDecl>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Body b = (Body)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new FunDecl(new IDLeaf(id.toString()), l1, t, b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunDecl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Body ::= LBRAC VarDeclList StatList RBRAC 
            {
              Body RESULT =null;
		int l1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<VarDecl> l1 = (ArrayList<VarDecl>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Stat> l2 = (ArrayList<Stat>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Body(l1, l2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Body",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Body ::= NoStatBody 
            {
              Body RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Body b = (Body)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Body",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NoStatBody ::= LBRAC VarDeclList RBRAC 
            {
              Body RESULT =null;
		int l1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<VarDecl> l1 = (ArrayList<VarDecl>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Body(l1, new ArrayList<Stat>());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NoStatBody",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ParamDeclList ::= 
            {
              ArrayList<ParDecl> RESULT =null;
		RESULT = new ArrayList<ParDecl>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParamDeclList",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ParamDeclList ::= NonEmptyParamDeclList 
            {
              ArrayList<ParDecl> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ParDecl> l = (ArrayList<ParDecl>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParamDeclList",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NonEmptyParamDeclList ::= ParDecl 
            {
              ArrayList<ParDecl> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParDecl p = (ParDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<ParDecl>(); RESULT.add(p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NonEmptyParamDeclList",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NonEmptyParamDeclList ::= NonEmptyParamDeclList PIPE ParDecl 
            {
              ArrayList<ParDecl> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<ParDecl> l = (ArrayList<ParDecl>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParDecl p = (ParDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l; RESULT.add(p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NonEmptyParamDeclList",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ParDecl ::= Type IdList 
            {
              ParDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<IDLeaf> l = (ArrayList<IDLeaf>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ParDecl(t, l, false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParDecl",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ParDecl ::= OUT Type IdList 
            {
              ParDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<IDLeaf> l = (ArrayList<IDLeaf>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ParDecl(t, l, true);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParDecl",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TypeOrVoid ::= Type 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeOrVoid",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TypeOrVoid ::= VOID 
            {
              Type RESULT =null;
		RESULT = new Type("void"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeOrVoid",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // VarDeclList ::= 
            {
              ArrayList<VarDecl> RESULT =null;
		RESULT = new ArrayList<VarDecl>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDeclList",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // VarDeclList ::= VarDecl VarDeclList 
            {
              ArrayList<VarDecl> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VarDecl v = (VarDecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<VarDecl> l = (ArrayList<VarDecl>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = l; RESULT.add(0,v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDeclList",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // StatList ::= Stat 
            {
              ArrayList<Stat> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stat s = (Stat)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ArrayList<Stat>(); RESULT.add(s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatList",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // StatList ::= Stat StatList 
            {
              ArrayList<Stat> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Stat s = (Stat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Stat> l = (ArrayList<Stat>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = l; RESULT.add(0,s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatList",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Stat ::= IfStat 
            {
              Stat RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IfStat s = (IfStat)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Stat ::= ForStat 
            {
              Stat RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ForStat s = (ForStat)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Stat ::= ReadStat SEMI 
            {
              Stat RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ReadStat s = (ReadStat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Stat ::= WriteStat SEMI 
            {
              Stat RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		WriteStat s = (WriteStat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Stat ::= AssignStat SEMI 
            {
              Stat RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AssignStat s = (AssignStat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Stat ::= WhileStat 
            {
              Stat RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WhileStat s = (WhileStat)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Stat ::= FunCall SEMI 
            {
              Stat RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FunCall f = (FunCall)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new FunCallStatement(f);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Stat ::= RETURN Expr SEMI 
            {
              Stat RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new ReturnStatement(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Stat ::= RETURN SEMI 
            {
              Stat RESULT =null;
		RESULT = new ReturnStatement(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Stat ::= SwitchStat SEMI 
            {
              Stat RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SwitchStat s = (SwitchStat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SwitchStat ::= SWITCH LPAR ID RPAR CaseList END SWITCH 
            {
              SwitchStat RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int clleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Case> cl = (ArrayList<Case>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new SwitchStat(new IDLeaf(id.toString()),cl);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SwitchStat",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CaseList ::= Case CaseList 
            {
              ArrayList<Case> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Case c = (Case)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int clleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int clright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Case> cl = (ArrayList<Case>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = cl; RESULT.add(0,c);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CaseList",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CaseList ::= 
            {
              ArrayList<Case> RESULT =null;
		RESULT = new ArrayList<Case>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CaseList",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Case ::= Const COLON StatList STOP SEMI 
            {
              Case RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ConstLeaf c = (ConstLeaf)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Stat> sl = (ArrayList<Stat>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new Case(c, sl);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Case",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Case ::= Const COLON STOP SEMI 
            {
              Case RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ConstLeaf c = (ConstLeaf)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		RESULT = new Case(c, new ArrayList<Stat>());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Case",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // IfStat ::= IF Expr THEN Body Else 
            {
              IfStat RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr ex = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Body b = (Body)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Body e = (Body)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new IfStat(ex,b,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IfStat",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Else ::= 
            {
              Body RESULT =null;
		RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Else",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Else ::= ELSE Body 
            {
              Body RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Body b = (Body)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Else",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // WhileStat ::= WHILE Expr LOOP Body 
            {
              WhileStat RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Body b = (Body)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new WhileStat(e,b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WhileStat",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ForStat ::= FOR ID ASSIGN INTEGER_CONST TO INTEGER_CONST LOOP Body 
            {
              ForStat RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String c1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String c2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Body b = (Body)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ForStat(new IDLeaf(id.toString()),c1,c2,b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ForStat",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ReadStat ::= IdList READ STRING_CONST 
            {
              ReadStat RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<IDLeaf> l = (ArrayList<IDLeaf>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ReadStat(l,c);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReadStat",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ReadStat ::= IdList READ 
            {
              ReadStat RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<IDLeaf> l = (ArrayList<IDLeaf>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new ReadStat(l);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReadStat",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // IdList ::= ID 
            {
              ArrayList<IDLeaf> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ArrayList<IDLeaf>(); RESULT.add(new IDLeaf(id.toString()));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdList",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // IdList ::= ID COMMA IdList 
            {
              ArrayList<IDLeaf> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<IDLeaf> l = (ArrayList<IDLeaf>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = l; RESULT.add(0, new IDLeaf(id.toString()));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdList",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // WriteStat ::= LPAR ExprList RPAR WRITE 
            {
              WriteStat RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Expr> l = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new WriteStat(l, 0);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WriteStat",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // WriteStat ::= LPAR ExprList RPAR WRITELN 
            {
              WriteStat RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Expr> l = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new WriteStat(l, 1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WriteStat",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // AssignStat ::= IdList ASSIGN ExprList 
            {
              AssignStat RESULT =null;
		int l1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<IDLeaf> l1 = (ArrayList<IDLeaf>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expr> l2 = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new AssignStat(l1,l2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AssignStat",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // FunCall ::= ID LPAR ExprList RPAR 
            {
              FunCall RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expr> l = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new FunCall(new IDLeaf(id.toString()),l);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunCall",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // FunCall ::= ID LPAR RPAR 
            {
              FunCall RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new FunCall(new IDLeaf(id.toString()),null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunCall",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ExprList ::= Expr 
            {
              ArrayList<Expr> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ArrayList<Expr>(); RESULT.add(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprList",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ExprList ::= Expr COMMA ExprList 
            {
              ArrayList<Expr> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expr> l = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = l; RESULT.add(0, e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprList",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Expr ::= INTEGER_CONST 
            {
              Expr RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new ConstLeaf("integer_const", c.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Expr ::= REAL_CONST 
            {
              Expr RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new ConstLeaf("real_const", c.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Expr ::= TRUE 
            {
              Expr RESULT =null;
		RESULT= new ConstLeaf("boolean_const", "true");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Expr ::= FALSE 
            {
              Expr RESULT =null;
		RESULT= new ConstLeaf("boolean_const", "false");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Expr ::= STRING_CONST 
            {
              Expr RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new ConstLeaf("string_const", c.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Expr ::= CHAR_CONST 
            {
              Expr RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new ConstLeaf("char_const", c.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Expr ::= ID 
            {
              Expr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new IDLeaf(id.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Expr ::= FunCall 
            {
              Expr RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FunCall f = (FunCall)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = f;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Expr ::= Expr PLUS Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BinaryOperation(e1, "plus", e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Expr ::= Expr MINUS Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BinaryOperation(e1, "minus", e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Expr ::= Expr TIMES Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BinaryOperation(e1, "times", e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Expr ::= Expr DIV Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BinaryOperation(e1, "div", e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Expr ::= Expr AND Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BinaryOperation(e1, "and", e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Expr ::= Expr POW Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BinaryOperation(e1, "pow", e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Expr ::= Expr STR_CONCAT Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BinaryOperation(e1, "str_concat", e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Expr ::= Expr OR Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BinaryOperation(e1, "or", e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Expr ::= Expr GT Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BinaryOperation(e1, "gt", e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Expr ::= Expr GE Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BinaryOperation(e1, "ge", e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Expr ::= Expr LT Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BinaryOperation(e1, "lt", e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Expr ::= Expr LE Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BinaryOperation(e1, "le", e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Expr ::= Expr EQ Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BinaryOperation(e1, "eq", e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Expr ::= Expr NE Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BinaryOperation(e1, "ne", e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Expr ::= MINUS Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new UnaryOperation("minus",e1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Expr ::= NOT Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new UnaryOperation("not",e1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Expr ::= LPAR Expr RPAR 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new UnaryOperation("par", e1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
